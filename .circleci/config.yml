version: '2.1'
orbs:
  slack: circleci/slack@4.5.0

aliases:
  - &platform_parameter
      platform:
        type: enum
        enum: ["amd64", "arm64"]
        default: amd64

#################################################################################
# Job Scheduler
workflows:
  build-and-cache:
    jobs:
      - arm64-qcow2:
          name: bake-arm64
          target: ubuntu
          platform: arm64
          executor: arm64

#################################################################################
# Reuseable Jobs
jobs:
  arm64-qcow2:
    parameters:
      target:
        type: string
      << : *platform_parameter
      executor:
        type: executor
        default: amd64
    executor: << parameters.executor >>
    environment:
      FLAVOR: ubuntu
      VERSION: "18.04"
      RELEASE: "bionic"
    steps:
      - checkout
      - prepare
      - cache_qcow2
      - prepare_qcow2
      - ops_notify_err

#################################################################################
# Reuseable Commands
commands:

  # CMD: Slack Notify if ERR
  ops_notify_err:
    description: "Alert Ops if Abort Failures Occur"
    steps:
      - slack/notify:
          event: fail
          channel: ops-kargo
          template: basic_fail_1

  # CMD: Qcow2 Image: Load from Cache || Download & Cache
  cache_qcow2:
    description: "Qcow2 Image: Load from Cache || Download & Cache"
    steps:
      - restore_cache:
          key: qcow2-ubuntu-bionic-<< parameters.platform >>-tmp-{{ checksum "preview/ubuntu/sha256sum.<< parameters.platform >>.txt" }}

      - run:
          command: |
            run_cache_image () {
            # Install build dependencies
            #sudo apt-get update && sudo apt-get install -y jq curl qemu-user libguestfs-tools qemu-user-static

            # Download qcow2
            curl --output ${FLAVOR}-${VERSION}-${ARCH}.qcow2 -L https://cloud-images.ubuntu.com/bionic/current/bionic-server-cloudimg-${ARCH}.img \

            # Grow disk size
            qemu-img resize ${FLAVOR}-${VERSION}-${ARCH}.qcow2 +20G;

            # Basic sysprep
            sudo virt-sysprep --verbose --add ${FLAVOR}-${VERSION}-${ARCH}.qcow2 --network --update \
              --enable user-account,logfiles,customize,bash-history,net-hostname,net-hwaddr,machine-id,dhcp-server-state,dhcp-client-state,yum-uuid,udev-persistent-net,tmp-files,smolt-uuid,rpm-db,package-manager-cache \
              --run-command 'apt-get autoremove -y' \
              --run-command 'apt-get purge -y';

            # Sparsify
            sudo virt-sparsify --verbose --compress --convert qcow2 ${FLAVOR}-${VERSION}-${ARCH}.qcow2 cache/${ARCH}/tmp.${FLAVOR}-${VERSION}-${ARCH}.qcow2 \
              && rm ${FLAVOR}-${VERSION}-${ARCH}.qcow2
            }

            # Check for && confirm cached image present || If not present then download, prepare, and cache
            [[ ! -f cache/<< parameters.platform >>/tmp.ubuntu-18.04-<< parameters.platform >>.qcow2 ]] && run_cache_image || echo "Detected cached disk image ... continuing"

      - run:
          command: |
            # Log tmp image stats
            qemu-img info cache/${ARCH}/tmp.${FLAVOR}-${VERSION}-${ARCH}.qcow2;

      - ops_notify_err
      - save_cache:
          key: qcow2-ubuntu-bionic-<< parameters.platform >>-tmp-{{ checksum "preview/ubuntu/sha256sum.<< parameters.platform >>.txt" }}
          paths:
            - cache/<< parameters.platform >>/tmp.ubuntu-18.04-<< parameters.platform >>.qcow2

  # CMD: Qcow2 Image: Load from Cache || Download & Cache
  prepare_qcow2:
    description: "Qcow2 Image: Customize"
    steps:
      - restore_cache:
          key: qcow2-ubuntu-bionic-<< parameters.platform >>-ccio-{{ checksum "preview/ubuntu/sha256sum.<< parameters.platform >>.txt" }}

      - run:
          no_output_timeout: 60m
          command: |
            run_cache_customize () {
            # Install build dependencies
            #sudo apt-get update && sudo apt-get install -y jq curl qemu-user libguestfs-tools qemu-user-static

            # Verify qcow2 image
            qemu-img info cache/${ARCH}/tmp.${FLAVOR}-${VERSION}-${ARCH}.qcow2;

            # Sysprep customize
            sudo virt-sysprep --verbose --add cache/${ARCH}/tmp.${FLAVOR}-${VERSION}-${ARCH}.qcow2 --network --update \
              --enable user-account,logfiles,customize,bash-history,net-hostname,net-hwaddr,machine-id,dhcp-server-state,dhcp-client-state,yum-uuid,udev-persistent-net,tmp-files,smolt-uuid,rpm-db,package-manager-cache \
              --install screenfetch,python3,tmux,git,vim,net-tools,cloud-init,cloud-initramfs-growroot,qemu-guest-agent \
              --run-command 'apt-get autoremove -y' \
              --run-command 'apt-get purge -y';

            # Sparsify
            sudo virt-sparsify --verbose --compress cache/${ARCH}/tmp.${FLAVOR}-${VERSION}-${ARCH}.qcow2 cache/${ARCH}/${FLAVOR}-${VERSION}-${ARCH}.qcow2
            }

            # Check for && confirm cached customized image present || If not present then customize and cache
            [[ ! -f cache/<< parameters.platform >>/ubuntu-18.04-<< parameters.platform >>.qcow2 ]] && run_cache_customize || echo "Detected cached disk image ... continuing"

      - run:
          command: |
            # Log final image stats
            qemu-img info cache/${ARCH}/${FLAVOR}-${VERSION}-${ARCH}.qcow2;

      - save_cache:
          key: qcow2-ubuntu-bionic-<< parameters.platform >>-ccio-{{ checksum "preview/ubuntu/sha256sum.<< parameters.platform >>.txt" }}
          paths:
            - cache/<< parameters.platform >>/ubuntu-18.04-<< parameters.platform >>.qcow2

  # CMD: Execute Docker Buildx
  buildx:
    description: "Runner: Execute Docker Buildx"
    parameters:
      bake_file:
        type: string
        default: bake.hcl
      target:
        type: string
      << : *platform_parameter
    steps:
      - run:
          command: |
            docker buildx bake \
              -f << parameters.bake_file >> \
              --progress plain \
              --set *.platform=linux/<< parameters.platform >> \
              << parameters.target >>

  # CMD: Configure Docker BuildX
  enable_buildx:
    description: "Runner: Configure Docker Buildx Environment"
    parameters:
      buildkit_version:
        type: string
        default: v0.9.3
    steps:
      - run:
          command: 'docker run --privileged --rm tonistiigi/binfmt --install all'
      - run:
          command: 'docker buildx ls | grep "build-<< parameters.buildkit_version >>"'
      - run:
          command: "echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin"
      - ops_notify_err

  prepare:
    description: "Runner: Install Prerequisites"
    steps:
      - run:
          command: "sudo apt-get update && sudo apt-get install -y jq curl qemu-user libguestfs-tools qemu-user-static"

#################################################################################
# Workflow Runner Instances
executors:

  # ARM64 Runner
  arm64:
    machine:
      enabled: true
      image: ubuntu-2004:202111-01
    environment:
      ARCH: arm64
      DOCKER_CLI_EXPERIMENTAL: enabled
    resource_class: arm.large

  # AMD64 Runner
  amd64:
    machine:
      enabled: true
      image: ubuntu-2004:202111-01
    environment:
      ARCH: amd64
      DOCKER_CLI_EXPERIMENTAL: enabled
    resource_class: large