version: '2.1'
orbs:
  slack: circleci/slack@4.5.0

aliases:
  - &platform_parameter
      platform:
        type: enum
        enum: [amd64, arm64]
        default: amd64

#################################################################################
# Job Scheduler
workflows:
  build-and-cache:
    jobs:
      - customize-qcow2:
          matrix:
            parameters:
              flavor: ["ubuntu-18.04", "fedora-35"]
              arch: [amd64]
          # exclude:
          #  - flavor: fedora-34
          #    arch: arm64

#################################################################################
# Reuseable Jobs
jobs:
  customize-qcow2:
    parameters:
      flavor:
        type: string
      arch:
        type: string
    executor: << parameters.arch >>
    environment:
      FLAVOR: << parameters.flavor >>
      ARCH: << parameters.arch >>
    steps:
      - checkout
      - prepare
      - cache_qcow2:
          flavor: << parameters.flavor >>
          arch: << parameters.arch >>
      - prepare_qcow2:
          flavor: << parameters.flavor >>
          arch: << parameters.arch >>
      - ops_notify_err

#################################################################################
# Reuseable Commands
commands:

  # CMD: Slack Notify if ERR
  ops_notify_err:
    description: Alert Ops if Abort Failures Occur
    steps:
      - slack/notify:
          event: fail
          channel: ops-kargo
          template: basic_fail_1

  # CMD: Qcow2 Image: Load from Cache || Download & Cache
  cache_qcow2:
    description: "Qcow2 Image: Load from Cache || Download & Cache"
    parameters:
      flavor:
        type: string
      arch:
        type: string
    steps:
      - run:
          command: |
            set -x
            mkdir -p cache/${ARCH}
            # Write out sha256sum for cache key
            NAME=${FLAVOR%-*}
            VERSION=${FLAVOR#*-}
            SHA256SUM=$(jq -r .distributions.${NAME}.\"${VERSION}\".${ARCH}.sha256sum index.json)
            echo ${SHA256SUM} > cache/${ARCH}/${FLAVOR}.txt

    # - restore_cache:
    #     key: qcow2-<< parameters.flavor >>-<< parameters.arch >>-tmp-{{ checksum "cache/<< parameters.arch >>/<< parameters.flavor >>.txt" }}

      - run:
          command: |
            set -x

            run_cache_image() {
              export LIBGUESTFS_BACKEND=direct

              NAME=${FLAVOR%-*}
              VERSION=${FLAVOR#*-}

              QCOW2_FILE=${FLAVOR}.qcow2

              BASE_URL=$(jq -r .distributions.${NAME}.\"${VERSION}\".${ARCH}.url index.json)
              DOWNLOAD_FILE=$(jq -r .distributions.${NAME}.\"${VERSION}\".${ARCH}.image index.json)
              SHA256SUM=$(jq -r .distributions.${NAME}.\"${VERSION}\".${ARCH}.sha256sum index.json)

              # Download qcow2
              curl --verbose \
                --output ${QCOW2_FILE} \
                --location ${BASE_URL}/${DOWNLOAD_FILE}

              echo "${SHA256SUM} ${QCOW2_FILE}" \
                | sha256sum --check --status \
                || echo "Invalid checksum: sha256sum check failed"

              # Grow disk size
              qemu-img resize ${QCOW2_FILE} +20G;

              # Sparsify
              sudo virt-sparsify \
                --verbose \
                --compress \
                --convert qcow2 ${QCOW2_FILE} \
                cache/${ARCH}/tmp.${QCOW2_FILE} \
              && rm ${QCOW2_FILE}
            }

            run_cache_image
            # Check for && confirm cached image present || If not present then download, prepare, and cache
            # [[ ! -f cache/${ARCH}/tmp.${FLAVOR}.qcow2 ]] && run_cache_image || echo "Detected cached disk image ... continuing"

      - run:
          command: |
            # Log tmp image stats
            qemu-img info cache/${ARCH}/tmp.${FLAVOR}.qcow2;

      - ops_notify_err
    # - save_cache:
    #     key: qcow2-<< parameters.flavor >>-<< parameters.arch >>-tmp-{{ checksum "cache/<< parameters.arch >>/<< parameters.flavor >>.txt" }}
    #     paths:
    #       - cache/<< parameters.arch >>/tmp.<< parameters.flavor >>.qcow2

  # CMD: Qcow2 Image: Load from Cache || Download & Cache
  prepare_qcow2:
    description: "Qcow2 Image: Customize"
    parameters:
      flavor:
        type: string
      arch:
        type: string
    steps:
    # - restore_cache:
    #     key: qcow2-<< parameters.flavor >>-<< parameters.arch >>-ccio-{{ checksum "cache/<< parameters.arch >>/<< parameters.flavor >>.txt" }}

      - run:
          no_output_timeout: 60m
          command: |
            run_cache_customize() {
              export LIBGUESTFS_BACKEND=direct

              NAME=${FLAVOR%-*}
              VERSION=${FLAVOR#*-}

              QCOW2_FILE=${FLAVOR}.qcow2
              # Source OS specific vars
              source preview/${NAME}/env.sh

              # Verify qcow2 image
              qemu-img info cache/${ARCH}/tmp.${QCOW2_FILE}

              sudo virt-sysprep \
                --verbose \
                --add cache/${ARCH}/tmp.${QCOW2_FILE} \
                --network \
                --enable ${VIRT_SYSPREP_OPERATIONS} \
                --commands-from-file preview/${NAME}/virt.sysprep

              # Sparsify
              sudo virt-sparsify \
                --verbose \
                --compress \
                cache/${ARCH}/tmp.${QCOW2_FILE} \
                cache/${ARCH}/${QCOW2_FILE} \
              && rm cache/${ARCH}/tmp.${QCOW2_FILE}
            }

            run_cache_customize
            # Check for && confirm cached customized image present || If not present then customize and cache
            # [[ ! -f cache/${ARCH}/${FLAVOR}.qcow2 ]] && run_cache_customize || echo "Detected cached disk image ... continuing"

      - run:
          command: |
            # Log final image stats
            qemu-img info cache/${ARCH}/${FLAVOR}.qcow2;

    # - save_cache:
    #     key: qcow2-<< parameters.flavor>>-<< parameters.arch >>-ccio-{{ checksum "cache/<< parameters.arch >>/<< parameters.flavor >>.txt" }}
    #     paths:
    #       - cache/<< parameters.arch >>/<< parameters.flavor >>.qcow2

  # CMD: Execute Docker Buildx
  buildx:
    description: "Runner: Execute Docker Buildx"
    parameters:
      bake_file:
        type: string
        default: bake.hcl
      target:
        type: string
      << : *platform_parameter
    steps:
      - run:
          command: |
            docker buildx bake \
              -f << parameters.bake_file >> \
              --progress plain \
              --set *.platform=linux/<< parameters.platform >> \
              << parameters.executor >>

  # CMD: Configure Docker BuildX
  enable_buildx:
    description: "Runner: Configure Docker Buildx Environment"
    parameters:
      buildkit_version:
        type: string
        default: latest
    steps:
      - run:
          command: docker run --privileged --rm tonistiigi/binfmt --install all
      - run:
          command: docker buildx ls | grep "build-<< parameters.buildkit_version >>"
      - run:
          command: echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin
      - ops_notify_err

  prepare:
    description: "Runner: Install Prerequisites"
    steps:
      - run:
          command: sudo apt-get update && sudo apt-get install -y jq curl qemu-user libguestfs-tools qemu-user-static

#################################################################################
# Workflow Runner Instances
executors:

  # ARM64 Runner
  arm64:
    machine:
      enabled: true
      image: ubuntu-2004:202111-01
    environment:
      DOCKER_CLI_EXPERIMENTAL: enabled
    resource_class: arm.large

  # AMD64 Runner
  amd64:
    machine:
      enabled: true
      image: ubuntu-2004:202111-01
    environment:
      DOCKER_CLI_EXPERIMENTAL: enabled
    resource_class: large
