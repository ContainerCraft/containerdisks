version: "2.1"
orbs:
  slack: circleci/slack@4.5.0

aliases:
  almalinux-flavors: &_almalinux-flavors
    - almalinux-8

  archlinux-flavors: &_archlinux-flavors
    - archlinux-latest

  centos-flavors: &_centos-flavors
    - centos-8
    - centos-9

  debian-flavors: &_debian-flavors
    - debian-10
    - debian-11

  fcos-flavors: &_fcos-flavors
    - fcos-35

  fedora-flavors: &_fedora-flavors
    - fedora-37

  freebsd-flavors: &_freebsd-flavors
    - freebsd-13

  opensuse-flavors: &_opensuse-flavors
    - opensuse-tumbleweed
    - opensuse-leap-15

  openwrt-flavors: &_openwrt-flavors
    - openwrt-21

  rocky-flavors: &_rocky-flavors
    - rocky-8

  ubuntu-flavors: &_ubuntu-flavors
    - ubuntu-22.04

  cache-key: &_cache-key
    key: << parameters.flavor >>-<< parameters.arch >>-{{ checksum "hack/customize.sh" }}-{{ checksum "images/<< parameters.flavor >>/env.sh" }}

#################################################################################
# Job Scheduler
workflows:
  build-and-publish-dev:
    jobs:
      # Start Arch Linux #
#      - customize:
#          name: customize-<< matrix.flavor >>-<< matrix.arch >>
#          matrix:
#            parameters:
#              flavor: *_archlinux-flavors
#              arch: [amd64]
#
#      - cradle:
#          requires:
#            - customize-<< matrix.flavor >>-amd64
#          name: cradle-<< matrix.flavor >>
#          matrix:
#            parameters:
#              flavor: *_archlinux-flavors
#
#      - trigger-tests:
#          requires:
#            - cradle-<< matrix.flavor >>
#          name: trigger-<< matrix.flavor >>-promotion
#          matrix:
#            parameters:
#              flavor: *_archlinux-flavors
      # End ArchLinux #

      # Start Rocky #
      - customize:
          name: customize-<< matrix.flavor >>-<< matrix.arch >>
          matrix:
            parameters:
              flavor: *_rocky-flavors
              arch: [amd64, arm64]

      - cradle:
          requires:
            - customize-<< matrix.flavor >>-amd64
            - customize-<< matrix.flavor >>-arm64
          name: cradle-<< matrix.flavor >>
          matrix:
            parameters:
              flavor: *_rocky-flavors

      - trigger-tests:
          requires:
            - cradle-<< matrix.flavor >>
          name: trigger-<< matrix.flavor >>-promotion
          matrix:
            parameters:
              flavor: *_rocky-flavors
      # End Rocky #

      # Start AlmaLinux #
      - customize:
          name: customize-<< matrix.flavor >>-<< matrix.arch >>
          matrix:
            parameters:
              flavor: *_almalinux-flavors
              arch: [amd64, arm64]

      - cradle:
          requires:
            - customize-<< matrix.flavor >>-amd64
            - customize-<< matrix.flavor >>-arm64
          name: cradle-<< matrix.flavor >>
          matrix:
            parameters:
              flavor: *_almalinux-flavors

      - trigger-tests:
          requires:
            - cradle-<< matrix.flavor >>
          name: trigger-<< matrix.flavor >>-promotion
          matrix:
            parameters:
              flavor: *_almalinux-flavors
      # End AlmaLinux #

      # Start CentOS #
      - customize:
          name: customize-<< matrix.flavor >>-<< matrix.arch >>
          matrix:
            parameters:
              flavor: *_centos-flavors
              arch: [amd64, arm64]

      - cradle:
          requires:
            - customize-<< matrix.flavor >>-amd64
            - customize-<< matrix.flavor >>-arm64
          name: cradle-<< matrix.flavor >>
          matrix:
            parameters:
              flavor: *_centos-flavors

      - trigger-tests:
          requires:
            - cradle-<< matrix.flavor >>
          name: trigger-<< matrix.flavor >>-promotion
          matrix:
            parameters:
              flavor: *_centos-flavors
      # End CentOS #

      # Start Fedora #
      - customize:
          name: customize-<< matrix.flavor >>-<< matrix.arch >>
          matrix:
            parameters:
              flavor: *_fedora-flavors
              arch: [amd64, arm64]

      - cradle:
          requires:
            - customize-<< matrix.flavor >>-amd64
            - customize-<< matrix.flavor >>-arm64
          name: cradle-<< matrix.flavor >>
          matrix:
            parameters:
              flavor: *_fedora-flavors

      - trigger-tests:
          requires:
            - cradle-<< matrix.flavor >>
          name: trigger-<< matrix.flavor >>-promotion
          matrix:
            parameters:
              flavor: *_fedora-flavors
      # End Fedora #

      # Start Ubuntu #
      - customize:
          name: customize-<< matrix.flavor >>-<< matrix.arch >>
          matrix:
            parameters:
              flavor: *_ubuntu-flavors
              arch: [amd64, arm64]

      - cradle:
          requires:
            - customize-<< matrix.flavor >>-amd64
            - customize-<< matrix.flavor >>-arm64
          name: cradle-<< matrix.flavor >>
          matrix:
            parameters:
              flavor: *_ubuntu-flavors

      - trigger-tests:
          requires:
            - cradle-<< matrix.flavor >>
          name: trigger-<< matrix.flavor >>-promotion
          matrix:
            parameters:
              flavor: *_ubuntu-flavors
      # End Ubuntu #

      # Start Debian #
      - customize:
          name: customize-<< matrix.flavor >>-<< matrix.arch >>
          matrix:
            parameters:
              flavor: *_debian-flavors
              arch: [amd64, arm64]

      - cradle:
          requires:
            - customize-<< matrix.flavor >>-amd64
            - customize-<< matrix.flavor >>-arm64
          name: cradle-<< matrix.flavor >>
          matrix:
            parameters:
              flavor: *_debian-flavors

      - trigger-tests:
          requires:
            - cradle-<< matrix.flavor >>
          name: trigger-<< matrix.flavor >>-promotion
          matrix:
            parameters:
              flavor: *_debian-flavors
      # End Debian #

      # Start openSUSE #
      - customize:
          name: customize-<< matrix.flavor >>-<< matrix.arch >>
          matrix:
            parameters:
              flavor: *_opensuse-flavors
              arch: [amd64]

      - cradle:
          requires:
            - customize-<< matrix.flavor >>-amd64
          name: cradle-<< matrix.flavor >>
          matrix:
            parameters:
              flavor: *_opensuse-flavors

      - trigger-tests:
          requires:
            - cradle-<< matrix.flavor >>
          name: trigger-<< matrix.flavor >>-promotion
          matrix:
            parameters:
              flavor: *_opensuse-flavors
      # End openSUSE #

      # Start OpenWrt #
      - customize:
          name: customize-<< matrix.flavor >>-<< matrix.arch >>
          matrix:
            parameters:
              flavor: *_openwrt-flavors
              arch: [amd64]

      - cradle:
          requires:
            - customize-<< matrix.flavor >>-amd64
          name: cradle-<< matrix.flavor >>
          matrix:
            parameters:
              flavor: *_openwrt-flavors

      - trigger-tests:
          requires:
            - cradle-<< matrix.flavor >>
          name: trigger-<< matrix.flavor >>-promotion
          matrix:
            parameters:
              flavor: *_openwrt-flavors
      # End OpenWrt #

      # Start FCOS #
      - customize:
          name: customize-<< matrix.flavor >>-<< matrix.arch >>
          matrix:
            parameters:
              flavor: *_fcos-flavors
              arch: [amd64, arm64]

      - cradle:
          requires:
            - customize-<< matrix.flavor >>-amd64
            - customize-<< matrix.flavor >>-arm64
          name: cradle-<< matrix.flavor >>
          matrix:
            parameters:
              flavor: *_fcos-flavors

      - trigger-tests:
          requires:
            - cradle-<< matrix.flavor >>
          name: trigger-<< matrix.flavor >>-promotion
          matrix:
            parameters:
              flavor: *_fcos-flavors
      # End FCOS #

      # Start FreeBSD #
      - customize:
          name: customize-<< matrix.flavor >>-<< matrix.arch >>
          matrix:
            parameters:
              flavor: *_freebsd-flavors
              arch: [amd64]

      - cradle:
          requires:
            - customize-<< matrix.flavor >>-amd64
          name: cradle-<< matrix.flavor >>
          matrix:
            parameters:
              flavor: *_freebsd-flavors

      - trigger-tests:
          requires:
            - cradle-<< matrix.flavor >>
          name: trigger-<< matrix.flavor >>-promotion
          matrix:
            parameters:
              flavor: *_freebsd-flavors
      # End FreeBSD #

#################################################################################
# Reuseable Jobs
jobs:
  # Download & Prepare qcow2 image(s)
  customize:
    parameters:
      flavor:
        type: string
      arch:
        type: string
    executor: << parameters.arch >>
    environment:
      DEBIAN_FRONTEND: noninteractive
      FLAVOR: << parameters.flavor >>
      ARCH: << parameters.arch >>
    steps:
      - checkout
      - halt-if-no-changes:
          flavor: << parameters.flavor >>
      - prepare-qcow2:
          flavor: << parameters.flavor >>
          arch: << parameters.arch >>
      - ops-notify-err

  # Containerize qcow2 image(s)
  cradle:
    parameters:
      flavor:
        type: string
    executor: amd64
    environment:
      FLAVOR: << parameters.flavor >>
    steps:
      - checkout
      - halt-if-no-changes:
          flavor: << parameters.flavor >>
      - cradle-qcow2:
          flavor: << parameters.flavor >>
      - ops-notify-err

  trigger-tests:
    executor: amd64
    parameters:
      flavor:
        type: string
    steps:
      - checkout
      - halt-if-no-changes:
          flavor: << parameters.flavor >>
      - trigger-gha-test:
          flavor: << parameters.flavor >>
      - ops-notify-err

#################################################################################
# Reuseable Commands
commands:
  halt-if-no-changes:
    description: "Halt the build if nothing has changed from origin/HEAD"
    parameters:
      flavor:
        type: string
    steps:
      - run:
          name: Halt if needed
          command: |
            set -x
            # if we aren't on the ccio branch and there are no files changes
            # from the ccio branch, halt. Else if the file has not changed in
            # the last commit, halt.
            if [[ "$CIRCLE_BRANCH" != "ccio" ]]; then
              if git diff --quiet HEAD $(git rev-parse origin/HEAD) -- images/<< parameters.flavor >>/ ; then
                circleci-agent step halt
              fi
            elif git diff --quiet HEAD $(git rev-parse origin/HEAD)~1 -- images/<< parameters.flavor >>/ ; then
              echo "No Change Detected"
              # circleci-agent step halt
            fi

  trigger-gha-test:
    description: "Tests: Trigger GHA Test Workflow"
    parameters:
      flavor:
        type: string
    steps:
      - run:
          name: Trigger GitHub Actions E2E test and promote workflow
          command: |
            set -x
            curl \
              --fail \
              --request POST \
              --header "Authorization: token $GITHUB_ACTIONS_PAT" \
              --header "Accept: application/vnd.github.everest-preview+json" \
              --data-raw '{"ref":"<< pipeline.git.branch >>", "inputs": {"flavor": "<< parameters.flavor >>"}' \
              https://api.github.com/repos/containercraft/kmi/actions/workflows/test.yml/dispatches

  buildx-bake:
    description: "Runner: Execute Docker Buildx"
    parameters:
      bake_file:
        type: string
        default: bake.hcl
      target:
        type: string
    steps:
      - run:
          command: |
            docker buildx bake \
              -f << parameters.bake_file >> \
              --push \
              --progress plain \
              << parameters.target >>

  # CMD: Configure Docker BuildX
  enable-buildx:
    description: "Runner: Configure Docker Buildx Environment"
    parameters:
      buildkit_version:
        type: string
        default: latest
    steps:
      - run:
          name: Install All Emulators
          command: |
            docker run --privileged --rm tonistiigi/binfmt --install arm64
      - run:
          name: Create builder with buildkit << parameters.buildkit_version >>
          command: |
            docker buildx ls \
              | grep "build-<< parameters.buildkit_version >>" \
              || docker buildx create --use \
              --name build-<< parameters.buildkit_version >> \
              --driver docker-container \
              --driver-opt image=moby/buildkit:<< parameters.buildkit_version >>,network=host
      - run:
          name: Set builder
          command: docker buildx use --default build-<< parameters.buildkit_version >>
      - run:
          name: Start up buildx and inspect
          command: docker buildx inspect --bootstrap
      - run:
          name: Login to dockerhub
          command: echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin
      - ops-notify-err

  prepare-qcow2:
    description: "Qcow2 Image: Download and Customize"
    parameters:
      flavor:
        type: string
      arch:
        type: string
    steps:
      - restore_cache:
          <<: *_cache-key

      - run:
          name: Customize image
          no_output_timeout: 90m
          command: |

            # Check for && confirm cached customized image present || If not
            # present then customize and cache
            if [[ ! -f ${FLAVOR}-${ARCH}.qcow2 ]]; then
              set -ex

              sudo apt-get update
              sudo apt-get upgrade -y
              sudo apt-get dist-upgrade -y
              sudo apt-get install -y \
                curl qemu-user libguestfs-tools qemu-user-static gzip

              bash hack/customize.sh ${FLAVOR} ${ARCH}
            else
              echo "Detected cached disk image ... continuing"
            fi

      - save_cache:
          <<: *_cache-key
          paths:
            - << parameters.flavor >>-<< parameters.arch >>.qcow2

      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - << parameters.flavor >>-<< parameters.arch >>.qcow2

  cradle-qcow2:
    description: "Qcow2 Image: Download and Customize"
    parameters:
      flavor:
        type: string
    steps:
      - attach_workspace:
          at: /home/circleci/project/images

      - run:
          command: ls -lah images/

      - enable-buildx
      - buildx-bake:
          target: << parameters.flavor >>

  # CMD: Slack Notify if ERR
  ops-notify-err:
    description: Alert Ops if Abort Failures Occur
    steps:
      - slack/notify:
          event: fail
          channel: ops-kargo
          template: basic_fail_1

#################################################################################
# Workflow Runner Instances
# CircleCI Machine Image List:
#   - https://circleci.com/docs/2.0/configuration-reference/#available-machine-images
#   - https://circleci.com/developer/images?imageType=machine
executors:
  # ARM64 Runner
  arm64:
    machine:
      enabled: true
      image: ubuntu-2004:202111-01
    environment:
      DOCKER_CLI_EXPERIMENTAL: enabled
    resource_class: arm.medium

  # AMD64 Runner
  amd64:
    machine:
      enabled: true
      image: ubuntu-2004:202111-01
    environment:
      DOCKER_CLI_EXPERIMENTAL: enabled
    resource_class: medium
